<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <!-- 处理事务逻辑 -->
    <context:component-scan base-package="com.ssm">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <context:property-placeholder location="classpath:db.properties"/>
    <!-- 数据源 -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
    	<property name="driverClassName" value="${jdbc.driverClass}"></property>
    	<property name="url" value="${jdbc.jdbcUrl}"></property>
    	<property name="username" value="${jdbc.user}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    	<!-- 初始化连接数量 -->
	   <property name="initialSize" value="5" />
	   <!-- 最大连接数 -->
	   <property name="maxActive" value="100" />
	   <!-- 最小连接数 -->
	   <property name="minIdle" value="5" />
	   <!-- 配置获取连接等待超时的时间 -->
	   <property name="maxWait" value="120000" />
	   <!-- 超过时间限制是否回收 -->
	   <property name="removeAbandoned" value="true" />
	   <!-- 超过时间限制多长 -->
	   <property name="removeAbandonedTimeout" value="1800" />
	   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	   <property name="timeBetweenEvictionRunsMillis" value="120000" />
	   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	   <property name="minEvictableIdleTimeMillis" value="300000" />
	   <!-- 用来检测连接是否有效的sql，要求是一个查询语句 -->
	   <property name="validationQuery" value="SELECT 1" />
	   <!-- 申请连接的时候检测 -->
	   <property name="testWhileIdle" value="true" />
	   <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
	   <property name="testOnBorrow" value="false" />
	   <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
	   <property name="testOnReturn" value="false" />
	   <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	   <property name="poolPreparedStatements" value="true" />
	   <property name="maxPoolPreparedStatementPerConnectionSize"
	      value="20" />
	   <property name="defaultAutoCommit" value="false" />
	   <!-- 配置监控统计拦截的filters -->
	   <property name="filters" value="stat"/>
    </bean>
    
    <!-- 配置和Mybatis的整合 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation" value="classpath:spring/mybatis-config.xml"></property>
		<property name="dataSource" ref="druidDataSource"></property>
		<!-- 指定mybatis mapper文件所在位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    
    <!-- 配置扫描器，将mybatis接口实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现 ，加入到ioc容器中-->
		<property name="basePackage" value="com.ssm.dao"></property>
	</bean>
	
	<!-- 配置事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="druidDataSource"></property>
	</bean>
	
	<!-- 1.开启基于注解的事务<tx:annotation-driven transaction-manager="transactionManager" /> -->
	<!-- 2.使用xml配置形式的事务，本次采用这种方式 -->
	<!-- *返回值, .. 包括service下有子包, *所有方法 ,..所有参数  -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut expression="execution(* com.ssm.service..*(..))" id="txPoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		    <!-- 所有方法都是事务方法 -->
			<tx:method name="*"/>
			<!-- 以get开始的所有方法 -->
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
</beans>
